{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	  // https://snippet-generator.app/
    
	  "Django: App URLs File": {
		"prefix": "urls",
		"body": [
		  "from django.urls import path, include, re_path",
		  "from .views\t  import *",
		  "",
		  "urlpatterns = [",
		  "${1:body}   ",
		  "]"
		],
		"description": "App URLs File"
	  },

	  "Django: linked App URLs File in global URLs.py": {
		"prefix": "iurls",
		"body": [
		  "# ${1:app_name}App",
		  "path('${1:app_name}/', include('${1:app_name}.urls')), "
		],
		"description": "linked App URLs File in global URLs.py"
    },
    "Django: Modell": {
        "prefix": "model",
        "body": [
          "class ${1:ModelName}(models.Model):",
          "\t# Fields",
          "\ttitle = models.CharField(max_length=200)",
          "\t{3}",
          "\t# Metods",
          "\tdef __str__(self):",
          "\t\treturn str(self.title)",
          "\t",
          "\tdef get_absolute_url(self):",
          "\t\treturn reverse(\"${2:reverse}\") #, kwargs={\"pk\": self.pk})",
          "",
          "\tclass Meta():",
          "\t\tverbose_name = '${1:ModelName}'",
          "\t\tverbose_name_plural = \"${1:ModelName}'s\"",
          "\t\t# permissions = (",
          "\t\t#\t\t\t\t ('add', 'Can add'), ",
          "\t\t#\t\t\t\t ('change', 'Can changr'),",
          "\t\t#\t\t\t\t ('delete', 'Can delete'),",
          "\t\t#\t\t\t\t ('view', 'Can view'),",
          "\t\t#\t\t\t ) "
        ],
        "description": "Django: Modell Full"
    },
    "Django: ModelAdmin": {
        "prefix": "admin",
        "body": [
          "@admin.register(${1:Model})",
          "class ${1:Model}Admin(admin.ModelAdmin):",
          "\tsearch_fields = (${2},)",
          "\tordering = ('',)",
          "\tlist_filter = ('',)",
          "\tlist_display = ('',)",
        //  "admin.site.register(${1:Model}, ${1:Model}Admin)"
        ],
        "description": "Django: ModelAdmin"
    },

    "Django: ModelAdmin Micro": {
        "prefix": "admin_micro",
        "body": [
          "admin.site.register(${1:Model})"
        ],
        "description": "Django: ModelAdmin Micro"
    },

    "Django: Simple TestCase": {
      "prefix": "testcase",
      "body": [
        "class ${1:Name}TestCase(TestCase):",
        "",
        "\t@classmethod",
        "\tdef setUpTestData(cls):",
        "\t\t\"\"\"Установки запускаются перед запуском теста на уровне настройки всего класса\"\"\"",
        "\t\tuser = User.objects.create(email=\"root@test.com\", password='top_secret')",
        "\t\tuser.save()",
        "",
        "\tdef setUp(self): ",
        "\t\t\"\"\"Установки запускаются перед каждым тестом.\"\"\"",
        "\t\tuser = User.objects.create(email=\"user@test.com\", password='top_secret')",
        "\t\tuser.save()",
        "\t\t${2}",
        "",
        "\tdef tearDown(self):",
        "\t\t\"\"\"Очистка после каждого метода\"\"\"",
        "\t\tpass",
        "",
        "\t# TESTS: ",
        "\tdef test_one_plus_one_equals_two(self):",
        "\t\t${3}",
        "\t\tself.assertEqual(1 + 1, 2)",
        ""
      ],
      "description": "Django: Simple TestCase"
    },

    "Django: Simple Test": {
      "prefix": "test",
      "body": [
        "def test_${1:name}(self):",
        "\t${2}",
        "\tself.assertEqual(1 + 1, 2)"
      ],
      "description": "Django: Simple Test"
    },
    "classview": {
      "prefix": "Django: Class Base View ",
      "body": [
        "class ${1:name}View(TemplateView):",
        "\tis_print=False",
        "\tdef dprint(self, *args, **kwargs):",
        "\t\tif self.is_print:",
        "\t\t\tprint(*args, **kwargs)",
        "",
        "\ttemplate_name = \"${2:app/file-name}.html\"",
        "",
        "\tdef get_context_data(self, **kwargs):",
        "\t\tcontext = super(${1:name}View, self).get_context_data(**kwargs)",
        "\t\t#context['something'] = ${3}",
        "\t\treturn context"
      ],
      "description": "classview"
    },
}